@page "/game/{GameId:guid}"
@using System.Text.Json
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.SignalR.Client
@using RR.DiceDuel.Core.Controllers.PlayerController
@using RR.DiceDuel.Core.Services.AuthService
@using RR.DiceDuel.Core.Services.SessionService.Models
@using RR.DiceDuel.Core.Services.SessionService.Types
@rendermode InteractiveServer

@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject IPlayerController PlayerController
@inject IJSRuntime Js

@implements IAsyncDisposable

@switch (_gameSession.CurrentState)
{
    case SessionStateType.Started:
        <div class="waiting-container">
            <div class="dice-spinner">
                <div class="dot dot-center"></div>
                <div class="dot dot-top-left"></div>
                <div class="dot dot-top-right"></div>
                <div class="dot dot-bottom-left"></div>
                <div class="dot dot-bottom-right"></div>
            </div>
            <div>Waiting for other players..</div>
        </div>
        break;
    case SessionStateType.WaitingConfirmation:
        <div class="d-flex justify-content-center ">
            <div>
                <h1>Are You Ready?</h1>
            </div>
            <div>
                <button @onclick="OnPlayerReady" class="btn-primary">@_playerReadyButtonText</button>
            </div>
            <div>
                @if (_gameSession.Timer > 0)
                {
                    <h3>Game start in @_gameSession.Timer second</h3>
                }
            </div>
        </div>
        break;
    case SessionStateType.GameOngoing:
        if (IsMyTurn())
        {
            <div class="center-container">
                <div class="d-flex justify-content-center align-items-center">
                    <button class="btn btn-primary" @onclick="OnRoll">Roll Dice</button>
                    <button class="btn" @onclick="OnRollSpecial">Roll Special Dice</button>
                </div>
            </div>
        }
        else
        {
            <div class="waiting-container">
                <div class="dice-spinner">
                    <div class="dot dot-center"></div>
                    <div class="dot dot-top-left"></div>
                    <div class="dot dot-top-right"></div>
                    <div class="dot dot-bottom-left"></div>
                    <div class="dot dot-bottom-right"></div>
                </div>
                <div>Waiting for other players turn...</div>
            </div>
        }
        break;
    case SessionStateType.ShowResult:
        <div class="banner">
            <img class="result-image" src="/content/FirstPlayer.webp" alt="Winner Dice Duel">
            <div class="winner-text">Player @_userName won!</div>
            @if (_gameSession.PlayerStatus.FirstOrDefault(x => x.PlayerInfo.Name == _userName)?.IsPlayerReady ?? false)
            {
                <div class="justify-content-center">
                    <div class="dice-spinner">
                        <div class="dot dot-center"></div>
                        <div class="dot dot-top-left"></div>
                        <div class="dot dot-top-right"></div>
                        <div class="dot dot-bottom-left"></div>
                        <div class="dot dot-bottom-right"></div>
                    </div>
                    <div>Waiting for other players...</div>
                </div>
            }
            else
            {
                <button @onclick="OnPlayerReady" class="btn-primary">Play again!</button>
            }
        </div>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@code {
    [Parameter]
    public Guid GameId { get; set; }
    private HubConnection _hubConnection;
    
    private string _userName = string.Empty;

    private string _playerReadyButtonText = string.Empty;

    private Session _gameSession = new();

    private readonly Stack<string> _gameLog = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await SessionStorage.GetItemAsync<string>("authToken");

            var isTokenValid = AuthService.VerifyJwt(token);
            if (!isTokenValid)
            {
                Navigation.NavigateTo("/login", new NavigationOptions
                {
                    ForceLoad = true
                });
                return;
            }
            
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri($"api/game?roomId={GameId}"), options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                }).Build();
            
            _hubConnection.On<string>("UpdateSession", receivedMessage =>
            {
                _gameSession = JsonSerializer.Deserialize<Session>(receivedMessage);
                
                var isPlayerReady = _gameSession.PlayerStatus.FirstOrDefault(x => x.PlayerInfo.Name == _userName)?.IsPlayerReady ?? false;
                _playerReadyButtonText = isPlayerReady ? "No!" : "Yes!";
                
                InvokeAsync(StateHasChanged);
            });
            
            _hubConnection.On<string>("LogInfo", receivedMessage =>
            {
                _gameLog.Push(receivedMessage);
                InvokeAsync(StateHasChanged);
            });
            
            await _hubConnection.StartAsync();
            
            _userName = AuthService.GetUserName(token);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    
    private void OnPlayerReady()
    {
        PlayerController.SetPlayerReady(GameId.ToString(), _userName);
    }
    
    private void OnRoll()
    {
        _ = PlaySound();
        PlayerController.SetRoll(GameId.ToString());
    }
    
    private void OnRollSpecial()
    {
        _ = PlaySound();
        PlayerController.SetSpecialRoll(GameId.ToString());
    }

    private bool IsMyTurn()
    {
        return PlayerController.CurrentPlayerMoveName(GameId.ToString()) == _userName;
    }
    
    private async Task PlaySound()
    {
        await Js.InvokeVoidAsync("playSound", "/content/roll.mp3");
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}