@page "/game/{GameId:guid}"
@using System.Text.Json
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.SignalR.Client
@using RR.DiceDuel.Core.Services.AuthService
@using RR.DiceDuel.Core.Services.SessionService
@using RR.DiceDuel.Core.Services.SessionService.Models
@using RR.DiceDuel.Core.Services.SessionService.Types
@rendermode InteractiveServer

@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject ISessionService SessionService

@implements IAsyncDisposable

<div class="text-left mt-3">
    <small>Room ID: @GameId</small>
</div>

@if (_gameSession.CurrentState == SessionStateType.WaitingConfirmation)
{
    <div class="d-flex justify-content-center align-items-center">
        <button class="btn btn-primary" @onclick="OnPlayerReady">@_playerReadyButtonText</button>
    </div>
}

@if (_gameSession.CurrentState == SessionStateType.GameOngoing && IsMyTurn())
{
<div class="d-flex justify-content-center align-items-center">
    <button class="btn btn-primary" @onclick="OnRoll">Roll Dice</button>
    <button class="btn btn-primary" @onclick="OnRollSpecial">Roll Special Dice</button>
</div>
}

<div class="game-log-container">
    <ul>
        @foreach (var msg in _gameSession.GameLog)
        {
        <li>@msg</li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public Guid GameId { get; set; }
    private HubConnection _hubConnection;
    
    private string _userName = string.Empty;

    private string _playerReadyButtonText = string.Empty;

    private Session _gameSession = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await SessionStorage.GetItemAsync<string>("authToken");

            var isTokenValid = AuthService.VerifyJwt(token);
            if (!isTokenValid)
            {
                Navigation.NavigateTo("/login", new NavigationOptions
                {
                    ForceLoad = true
                });
                return;
            }
            
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri($"api/game?roomId={GameId}"), options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                }).Build();
            
            _hubConnection.On<string>("Test", receivedMessage =>
            {
                _gameSession = JsonSerializer.Deserialize<Session>(receivedMessage);
                
                var isPlayerReady = _gameSession.PlayerStatus.FirstOrDefault(x => x.PlayerInfo.Name == _userName)?.IsPlayerReady ?? false;
                _playerReadyButtonText = isPlayerReady ? "Not ready!" : "Ready!";
                
                InvokeAsync(StateHasChanged);
            });
            
            await _hubConnection.StartAsync();
            
            _userName = AuthService.GetUserName(token);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    
    private void OnPlayerReady()
    {
        SessionService.SetPlayerReady(GameId.ToString(), _userName);
    }
    
    private void OnRoll()
    {
        SessionService.SetPlayerMove(GameId.ToString(), _userName, "safe");
    }
    
    private void OnRollSpecial()
    {
        SessionService.SetPlayerMove(GameId.ToString(), _userName, "special");
    }

    private bool IsMyTurn()
    {
        return _gameSession.CurrentPlayerMove == _userName;
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}