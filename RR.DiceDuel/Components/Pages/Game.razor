@page "/game/{GameId:guid}"
@using System.Text
@using System.Text.Json
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.SignalR.Client
@using RR.DiceDuel.Core.Services.AuthService
@using RR.DiceDuel.Core.Services.PlayerControllerService
@using RR.DiceDuel.Core.Services.SessionService.Models
@using RR.DiceDuel.Core.Services.SessionService.Types
@rendermode InteractiveServer

@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject IPlayerControllerService PlayerControllerService
@inject IJSRuntime Js

@implements IAsyncDisposable

<div class="div-wrapper">@GetGameResult()</div>
@switch (_gameSession.CurrentState)
{
    case SessionStateType.Started:
        
        <div class="div-wrapper">
            <div class="dice-spinner">
                <div class="dot dot-center"></div>
                <div class="dot dot-top-left"></div>
                <div class="dot dot-top-right"></div>
                <div class="dot dot-bottom-left"></div>
                <div class="dot dot-bottom-right"></div>
            </div>
            Waiting for other players..
        </div>
        break;
    case SessionStateType.WaitingConfirmation:
        <div class="div-wrapper">
            <h3>Are you ready?</h3>
        </div>
        <div class="div-wrapper">
            <button @onclick="OnPlayerReady">@_playerReadyButtonText</button>
        </div>
        <div class="div-wrapper">
            @if (_gameSession.Timer > -1)
            {
                <h3>Game start in @_gameSession.Timer second</h3>
            }
        </div>
        break;
    case SessionStateType.GameOngoing:
        if (IsMyTurn())
        {
            <div class="div-wrapper">
                <button @onclick="OnRoll">Roll Dice</button>
                <button @onclick="OnRollSpecial">Roll Special Dice</button>
            </div>
        }
        else
        {
            <div class="div-wrapper">@_lastTurn</div>
            <div class="div-wrapper">
                <div class="dice-spinner">
                    <div class="dot dot-center"></div>
                    <div class="dot dot-top-left"></div>
                    <div class="dot dot-top-right"></div>
                    <div class="dot dot-bottom-left"></div>
                    <div class="dot dot-bottom-right"></div>
                </div>
                Waiting for other players turn...
            </div>
        }
        break;
    case SessionStateType.ShowResult:
        <div class="div-wrapper">
            @switch (GetWinner())
            {
            case -1:
                <img class="result-image" src="/content/SecondPlace.webp" alt="Winner Dice Duel">
            break;
            case 0:
                <img class="result-image" src="/content/Draw.webp" alt="Winner Dice Duel">
            break;
            case 1:
                <img class="result-image" src="/content/FirstPlayer.webp" alt="Winner Dice Duel">
            break;
            }
        </div>
        <div class="div-wrapper">
            @switch (GetWinner())
            {
            case -1:
                <h1>Better Luck next time, @_userName</h1>
            break;
            case 0:
                <h1>It's a Draw!</h1>
            break;
            case 1:
                <h1>Player @_userName won!</h1>
            break;
            }
        </div>
        <div class="div-wrapper">
            @if (_gameSession.PlayerStatus.FirstOrDefault(x => x.PlayerInfo.Name == _userName)?.IsPlayerReady ?? false)
            {
                <div class="dice-spinner">
                    <div class="dot dot-center"></div>
                    <div class="dot dot-top-left"></div>
                    <div class="dot dot-top-right"></div>
                    <div class="dot dot-bottom-left"></div>
                    <div class="dot dot-bottom-right"></div>
                </div>
                <div>Waiting for other players...</div>
            }
            else
            {
                <button @onclick="OnPlayerReady">Play again!</button>
            }
        </div>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@code {
    [Parameter] public Guid GameId { get; set; }
    private HubConnection _hubConnection;
    private string _userName = string.Empty;
    private string _playerReadyButtonText = string.Empty;
    private Session _gameSession = new();

    private string _lastTurn = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("window.onBeforeUnload.subscribeBeforeUnload", DotNetObjectReference.Create(this));
            var token = await SessionStorage.GetItemAsync<string>("authToken");

            var isTokenValid = AuthService.VerifyJwt(token);
            if (!isTokenValid)
            {
                Navigation.NavigateTo("/login", new NavigationOptions
                {
                    ForceLoad = true
                });
                return;
            }

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri($"api/game?roomId={GameId}"), options => { options.AccessTokenProvider = () => Task.FromResult(token); }).Build();

            _hubConnection.On<string>("UpdateSession", receivedMessage =>
            {
                _gameSession = JsonSerializer.Deserialize<Session>(receivedMessage);

                var isPlayerReady = _gameSession.PlayerStatus.FirstOrDefault(x => x.PlayerInfo.Name == _userName)?.IsPlayerReady ?? false;
                _playerReadyButtonText = isPlayerReady ? "No!" : "Yes!";

                InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();

            _userName = AuthService.GetUserName(token);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnPlayerReady()
    {
        PlayerControllerService.SetPlayerReady(GameId.ToString(), _userName);
    }

    private void OnRoll()
    {
        _ = PlaySound();
        var roll = PlayerControllerService.SetRoll(GameId.ToString());
        var turn = roll.Select(x => $"[{x}]").ToList();
        _lastTurn = $"Your result: {turn[0]} {turn[1]} {turn[2]} - score {roll.Sum()}";
    }

    private void OnRollSpecial()
    {
        _ = PlaySound();
        var roll = PlayerControllerService.SetSpecialRoll(GameId.ToString());

        _lastTurn = roll switch
        {
            1 => "Your result: [X] - you lost!",
            6 => "Your result: [L] - score 24!",
            _ => _lastTurn
        };

        _lastTurn = $"Your result: {roll}";
    }

    private bool IsMyTurn()
    {
        return PlayerControllerService.CurrentPlayerMoveName(GameId.ToString()) == _userName;
    }

    private async Task PlaySound()
    {
        await Js.InvokeVoidAsync("playSound", "/content/roll.mp3");
    }

    private int GetWinner()
    {
        var player = _gameSession.PlayerStatus.FirstOrDefault(x => x.PlayerInfo.Name == _userName);
        if (player is null)
        {
            return -2;
        }

        if (player.GameStatistic.Wins > 0)
        {
            return 1;
        }

        if (player.GameStatistic.Defeats > 0)
        {
            return -1;
        }

        return 0;
    }

    private string GetGameResult()
    {
        var stringBuilder = new StringBuilder();

        if (_gameSession?.PlayerStatus is not null)
        {
            foreach (var player in _gameSession.PlayerStatus)
            {
                stringBuilder.AppendLine($"{player.PlayerInfo.Name} - {player.GameStatistic.TotalScores}");
            }
        }
        
        return stringBuilder.ToString();
    }

    [JSInvokable]
    public void OnBeforeUnload()
    {
        _ = DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}