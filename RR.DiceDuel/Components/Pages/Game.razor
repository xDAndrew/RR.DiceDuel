@page "/game/{GameId:guid}"
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.SignalR.Client
@using RR.DiceDuel.Core.Services.AuthService
@rendermode InteractiveServer

@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage

@implements IAsyncDisposable

<h3>Game</h3>

<div class="game-log-container">
    <ul>
        @foreach (var msg in _messages)
        {
        <li>@msg"</li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public Guid GameId { get; set; }
    private HubConnection _hubConnection;
    private Timer _timer;
    
    private readonly Stack<string> _messages = [];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await SessionStorage.GetItemAsync<string>("authToken");

            var isTokenValid = AuthService.VerifyJwt(token);
            if (!isTokenValid)
            {
                Navigation.NavigateTo("/login", new NavigationOptions
                {
                    ForceLoad = true
                });
                return;
            }
            
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri($"api/game?roomId={GameId}"), options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                }).Build();
            
            _hubConnection.On<string>("Test", receivedMessage =>
            {
                _messages.Push($"[{DateTime.UtcNow}]:[{receivedMessage}]");
                InvokeAsync(StateHasChanged);
            });
            
            await _hubConnection.StartAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    
    public async ValueTask DisposeAsync()
    {
        _timer?.DisposeAsync();
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}